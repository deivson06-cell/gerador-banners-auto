import os, time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager

def setup_driver():
    print("üîß Configurando Chrome...")
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    print("‚úÖ Chrome configurado!")
    return driver

def fazer_login(driver, login, senha):
    print("üîë Fazendo login no GERADOR PRO...")
    driver.get("https://gerador.pro/login.php")
    time.sleep(5)
    
    # Preenche usu√°rio
    campo_usuario = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.NAME, "username"))
    )
    campo_usuario.clear()
    campo_usuario.send_keys(login)
    print("‚úÖ Usu√°rio preenchido")
    
    # Preenche senha
    campo_senha = driver.find_element(By.NAME, "password")
    campo_senha.clear()
    campo_senha.send_keys(senha)
    print("‚úÖ Senha preenchida")
    
    # Clica no bot√£o de login
    botao_login = driver.find_element(By.XPATH, "//button[@type='submit']")
    botao_login.click()
    print("‚úÖ Login executado!")
    
    # Aguarda redirecionamento
    WebDriverWait(driver, 10).until(
        lambda driver: "index.php" in driver.current_url
    )
    print(f"‚úÖ Login bem-sucedido! URL: {driver.current_url}")

def ir_gerar_futebol(driver):
    print("‚öΩ Indo para Gerar Futebol...")
    
    # Aguarda a p√°gina carregar completamente
    time.sleep(3)
    
    # M√∫ltiplas estrat√©gias para encontrar e clicar no link
    estrategias = [
        # Link direto por texto
        "//a[contains(text(), 'Gerar Futebol')]",
        "//a[text()='Gerar Futebol']",
        
        # Link por href
        "//a[@href='https://gerador.pro/futbanner.php']",
        "//a[contains(@href, 'futbanner.php')]",
        "//a[contains(@href, 'futebol')]",
        
        # Div ou outros elementos clic√°veis
        "//div[contains(text(), 'Gerar Futebol')]",
        "//span[contains(text(), 'Gerar Futebol')]",
        "//li[contains(text(), 'Gerar Futebol')]",
        
        # Por posi√ß√£o (pode ser o terceiro link)
        "(//a)[3]",
        
        # Menu items
        "//nav//a[contains(text(), 'Gerar Futebol')]",
        "//*[@class and contains(text(), 'Gerar Futebol')]"
    ]
    
    link_clicado = False
    for i, strategy in enumerate(estrategias):
        try:
            print(f"üîç Tentativa {i+1}: {strategy}")
            
            # Tenta encontrar o elemento
            elemento = driver.find_element(By.XPATH, strategy)
            
            # Verifica se est√° vis√≠vel
            if elemento.is_displayed():
                # Tenta clicar normalmente
                try:
                    elemento.click()
                    link_clicado = True
                    print("‚úÖ Clicou em Gerar Futebol (clique normal)")
                    break
                except:
                    # Se clique normal falhou, tenta JavaScript
                    try:
                        driver.execute_script("arguments[0].click();", elemento)
                        link_clicado = True
                        print("‚úÖ Clicou em Gerar Futebol (JavaScript)")
                        break
                    except:
                        print("   ‚ùå Clique falhou")
            else:
                print("   ‚ùå Elemento n√£o vis√≠vel")
                
        except Exception as e:
            print(f"   ‚ùå Falhou: {str(e)[:50]}")
            continue
    
    # Se ainda n√£o clicou, tenta navegar diretamente pela URL
    if not link_clicado:
        print("üîÑ Tentando navega√ß√£o direta...")
        try:
            driver.get("https://gerador.pro/futbanner.php")
            link_clicado = True
            print("‚úÖ Navegou diretamente para futbanner.php")
        except:
            print("‚ùå Navega√ß√£o direta falhou")
    
    if not link_clicado:
        raise Exception("N√£o foi poss√≠vel acessar Gerar Futebol")
    
    # Aguarda carregar a nova p√°gina
    time.sleep(5)
    print(f"‚úÖ P√°gina carregada: {driver.current_url}")
    
    # Verifica se realmente est√° na p√°gina de futebol
    if "futbanner" not in driver.current_url.lower():
        print("‚ö†Ô∏è URL n√£o cont√©m 'futbanner', mas continuando...")

def debug_pagina_futebol(driver):
    """Debug da p√°gina de futebol para entender a estrutura"""
    print("üîç ANALISANDO P√ÅGINA DE FUTEBOL:")
    
    try:
        # Pega o conte√∫do da p√°gina
        body_text = driver.find_element(By.TAG_NAME, "body").text
        print("üìÑ Conte√∫do da p√°gina (primeiros 1000 chars):")
        print(f"   {body_text[:1000]}...")
        
        # Lista todos os bot√µes
        buttons = driver.find_elements(By.TAG_NAME, "button")
        print(f"\nüîò {len(buttons)} bot√µes encontrados:")
        for i, btn in enumerate(buttons):
            text = btn.text.strip()[:50] or "sem texto"
            onclick = btn.get_attribute('onclick') or "sem onclick"
            class_attr = btn.get_attribute('class') or "sem class"
            print(f"   {i+1}. '{text}' - class='{class_attr}' onclick='{onclick[:50]}...'")
        
        # Lista selects/dropdowns
        selects = driver.find_elements(By.TAG_NAME, "select")
        print(f"\nüìã {len(selects)} selects encontrados:")
        for i, select in enumerate(selects):
            name = select.get_attribute('name') or "sem name"
            id_attr = select.get_attribute('id') or "sem id"
            options = select.find_elements(By.TAG_NAME, "option")
            print(f"   {i+1}. name='{name}' id='{id_attr}' - {len(options)} op√ß√µes")
            for j, opt in enumerate(options[:5]):  # Primeiras 5 op√ß√µes
                value = opt.get_attribute('value')
                text = opt.text.strip()
                print(f"      {j+1}. value='{value}' text='{text}'")
        
        # Lista inputs
        inputs = driver.find_elements(By.TAG_NAME, "input")
        print(f"\nüìù {len(inputs)} inputs encontrados:")
        for i, inp in enumerate(inputs):
            type_attr = inp.get_attribute('type')
            name = inp.get_attribute('name') or "sem name"
            value = inp.get_attribute('value') or "sem value"
            if type_attr in ['radio', 'checkbox']:
                print(f"   {i+1}. type='{type_attr}' name='{name}' value='{value}'")
        
        # Procura por texto relacionado a modelos
        if "modelo" in body_text.lower():
            print("\nüé® Palavra 'modelo' encontrada na p√°gina!")
        if "2" in body_text:
            print("üî¢ N√∫mero '2' encontrado na p√°gina!")
        if "hoje" in body_text.lower():
            print("üìÖ Palavra 'hoje' encontrada na p√°gina!")
        if "gerar" in body_text.lower():
            print("üîÑ Palavra 'gerar' encontrada na p√°gina!")
        if "telegram" in body_text.lower():
            print("üì§ Palavra 'telegram' encontrada na p√°gina!")
            
    except Exception as e:
        print(f"‚ùå Erro no debug: {e}")

def selecionar_opcoes_futebol(driver):
    print("üé® Configurando op√ß√µes de gera√ß√£o...")
    
    # Debug da p√°gina primeiro
    debug_pagina_futebol(driver)
    
    # Aguarda um pouco para garantir que carregou
    time.sleep(2)
    
    # Estrat√©gias para selecionar Modelo 2
    print("\nüé® Tentando selecionar Modelo 2...")
    modelo_selecionado = False
    
    estrategias_modelo = [
        # Radio buttons
        "//input[@type='radio' and @value='2']",
        "//input[@type='radio' and contains(@name, 'modelo') and @value='2']",
        "//input[@type='radio'][2]",  # Segundo radio button
        
        # Select dropdown
        "//select//option[@value='2']",
        "//select//option[contains(text(), '2')]",
        "//select//option[contains(text(), 'Modelo 2')]",
        
        # Buttons ou divs clic√°veis
        "//button[contains(text(), '2')]",
        "//div[contains(text(), 'Modelo 2')]",
        "//label[contains(text(), 'Modelo 2')]",
    ]
    
    for i, strategy in enumerate(estrategias_modelo):
        try:
            print(f"üîç Estrat√©gia {i+1}: {strategy}")
            elemento = driver.find_element(By.XPATH, strategy)
            
            if elemento.tag_name == "option":
                # Se for option, seleciona no dropdown
                select = elemento.find_element(By.XPATH, "./..")
                select.click()
                elemento.click()
            else:
                # Se for outro tipo, s√≥ clica
                elemento.click()
            
            modelo_selecionado = True
            print("‚úÖ Modelo 2 selecionado!")
            break
            
        except Exception as e:
            print(f"   ‚ùå Falhou: {str(e)[:50]}")
            continue
    
    if not modelo_selecionado:
        print("‚ö†Ô∏è Modelo 2 n√£o encontrado, continuando sem sele√ß√£o...")
    
    time.sleep(1)
    
    # Estrat√©gias para selecionar "Hoje" / "Dia atual"
    print("\nüìÖ Tentando selecionar jogos de hoje...")
    dia_selecionado = False
    
    estrategias_dia = [
        # Radio buttons
        "//input[@type='radio' and contains(@value, 'hoje')]",
        "//input[@type='radio' and contains(@value, 'today')]",
        "//input[@type='radio'][1]",  # Primeiro radio button (pode ser "hoje")
        
        # Select dropdown
        "//select//option[contains(text(), 'Hoje')]",
        "//select//option[contains(text(), 'hoje')]",
        "//select//option[contains(text(), 'Dia')]",
        
        # Buttons
        "//button[contains(text(), 'Hoje')]",
        "//button[contains(text(), 'hoje')]",
    ]
    
    for i, strategy in enumerate(estrategias_dia):
        try:
            print(f"üîç Estrat√©gia {i+1}: {strategy}")
            elemento = driver.find_element(By.XPATH, strategy)
            
            if elemento.tag_name == "option":
                select = elemento.find_element(By.XPATH, "./..")
                select.click()
                elemento.click()
            else:
                elemento.click()
            
            dia_selecionado = True
            print("‚úÖ Jogos de hoje selecionados!")
            break
            
        except Exception as e:
            print(f"   ‚ùå Falhou: {str(e)[:50]}")
            continue
    
    if not dia_selecionado:
        print("‚ö†Ô∏è Sele√ß√£o de 'hoje' n√£o encontrada, continuando...")
    
    time.sleep(1)

def gerar_banners(driver):
    print("üîÑ Procurando bot√£o Gerar...")
    
    # M√∫ltiplas estrat√©gias para encontrar o bot√£o gerar
    estrategias_gerar = [
        "//button[contains(text(), 'Gerar')]",
        "//input[@type='submit' and contains(@value, 'Gerar')]",
        "//button[@type='submit']",
        "//input[@type='submit']",
        "//button[contains(text(), 'GERAR')]",
        "//div[contains(text(), 'Gerar') and @onclick]",
        "//a[contains(text(), 'Gerar')]",
    ]
    
    botao_clicado = False
    for i, strategy in enumerate(estrategias_gerar):
        try:
            print(f"üîç Tentativa {i+1}: {strategy}")
            botao = WebDriverWait(driver, 3).until(
                EC.element_to_be_clickable((By.XPATH, strategy))
            )
            botao.click()
            botao_clicado = True
            print("‚úÖ Bot√£o Gerar clicado!")
            break
            
        except Exception as e:
            print(f"   ‚ùå Falhou: {str(e)[:50]}")
            continue
    
    if not botao_clicado:
        raise Exception("Bot√£o Gerar n√£o encontrado!")
    
    print("‚è≥ Aguardando gera√ß√£o dos banners...")
    # Aguarda um tempo para a gera√ß√£o come√ßar
    time.sleep(10)

def aguardar_e_enviar_telegram(driver):
    print("üì§ Procurando pr√≥ximos passos ap√≥s gera√ß√£o...")
    
    # Primeiro, aguarda um pouco para ver se aparece algo
    time.sleep(5)
    
    # Verifica se apareceu sele√ß√£o de cores ou outras op√ß√µes
    print("üé® Verificando se apareceram op√ß√µes de cores...")
    
    opcoes_cores = [
        "//button[contains(@style, 'background') or contains(@class, 'cor')]",
        "//div[contains(@class, 'cor') or contains(@class, 'color')]", 
        "//button[contains(text(), 'Cor') or contains(text(), 'cor')]",
        "//div[contains(text(), 'Escolha') and contains(text(), 'cor')]",
        "//input[@type='radio' and contains(@name, 'cor')]",
        "//select[contains(@name, 'cor') or contains(@id, 'cor')]",
        "//button[contains(@onclick, 'cor')]"
    ]
    
    cor_selecionada = False
    for i, strategy in enumerate(opcoes_cores):
        try:
            print(f"üîç Procurando cores - estrat√©gia {i+1}")
            elementos_cor = driver.find_elements(By.XPATH, strategy)
            if elementos_cor:
                print(f"‚úÖ Encontrou {len(elementos_cor)} op√ß√µes de cor!")
                # Clica na primeira cor dispon√≠vel (geralmente padr√£o)
                elementos_cor[0].click()
                cor_selecionada = True
                print("‚úÖ Cor selecionada (primeira op√ß√£o)")
                time.sleep(2)
                break
        except:
            continue
    
    if not cor_selecionada:
        print("‚ö†Ô∏è Nenhuma sele√ß√£o de cor encontrada")
    
    # Procura por bot√µes de confirma√ß√£o/continuar ap√≥s sele√ß√£o de cor
    print("üîÑ Procurando bot√£o de confirma√ß√£o...")
    
    botoes_confirmacao = [
        "//button[contains(text(), 'Confirmar')]",
        "//button[contains(text(), 'Continuar')]", 
        "//button[contains(text(), 'Avan√ßar')]",
        "//button[contains(text(), 'Pr√≥ximo')]",
        "//button[contains(text(), 'OK')]",
        "//input[@type='submit']",
        "//button[@type='submit']"
    ]
    
    confirmacao_clicada = False
    for i, strategy in enumerate(botoes_confirmacao):
        try:
            print(f"üîç Procurando confirma√ß√£o - estrat√©gia {i+1}")
            botao = WebDriverWait(driver, 3).until(
                EC.element_to_be_clickable((By.XPATH, strategy))
            )
            botao.click()
            confirmacao_clicada = True
            print("‚úÖ Bot√£o de confirma√ß√£o clicado!")
            time.sleep(3)
            break
        except:
            continue
    
    if not confirmacao_clicada:
        print("‚ö†Ô∏è Nenhum bot√£o de confirma√ß√£o encontrado")
    
    # Agora procura pelo bot√£o de envio para Telegram
    print("üì§ Procurando bot√£o de envio para Telegram...")
    
    max_tentativas = 20  # Reduzido para 20 tentativas (1min 40s)
    
    estrategias_enviar = [
        "//button[contains(text(), 'Enviar')]",
        "//button[contains(text(), 'Telegram')]",
        "//button[contains(text(), 'ENVIAR')]",
        "//input[@type='button' and contains(@value, 'Enviar')]",
        "//a[contains(text(), 'Enviar')]",
        "//div[contains(text(), 'Enviar') and @onclick]",
        "//button[contains(@onclick, 'telegram')]",
        "//button[contains(text(), 'Finalizar')]",
        "//button[contains(text(), 'Concluir')]"
    ]
    
    for tentativa in range(max_tentativas):
        print(f"‚è≥ Tentativa {tentativa + 1}/{max_tentativas} - Procurando bot√£o enviar...")
        
        # Debug: mostra o que tem na p√°gina atual
        if tentativa % 5 == 0:  # A cada 5 tentativas, mostra debug
            try:
                body_text = driver.find_element(By.TAG_NAME, "body").text
                print(f"üìÑ Debug da p√°gina atual: {body_text[:200]}...")
                
                # Lista bot√µes vis√≠veis
                buttons = driver.find_elements(By.TAG_NAME, "button")
                if buttons:
                    print(f"üîò {len(buttons)} bot√µes na p√°gina:")
                    for i, btn in enumerate(buttons[:3]):
                        text = btn.text.strip()[:30] or "sem texto"
                        print(f"   {i+1}. '{text}'")
            except:
                pass
        
        for i, strategy in enumerate(estrategias_enviar):
            try:
                botao_enviar = driver.find_element(By.XPATH, strategy)
                if botao_enviar.is_displayed() and botao_enviar.is_enabled():
                    botao_enviar.click()
                    print("‚úÖ Bot√£o enviar clicado!")
                    time.sleep(5)
                    print("üéâ BANNERS ENVIADOS PARA O TELEGRAM!")
                    return True
            except:
                continue
        
        time.sleep(5)
    
    print("‚ö†Ô∏è Bot√£o de enviar n√£o apareceu ap√≥s as tentativas")
    print("üí° Verificando se apareceu algum link ou mensagem de sucesso...")
    
    # Verifica se apareceu alguma mensagem de sucesso
    try:
        body_text = driver.find_element(By.TAG_NAME, "body").text
        print(f"üìÑ Conte√∫do final da p√°gina: {body_text[:500]}...")
        
        if any(palavra in body_text.lower() for palavra in ['sucesso', 'enviado', 'conclu√≠do', 'finalizado', 'pronto', 'gerado']):
            print("‚úÖ Poss√≠vel sucesso detectado no texto da p√°gina!")
            return True
        
        # Se n√£o encontrou sucesso, lista todos os bot√µes para debug
        buttons = driver.find_elements(By.TAG_NAME, "button")
        print(f"üîò Bot√µes dispon√≠veis na p√°gina final ({len(buttons)}):")
        for i, btn in enumerate(buttons):
            text = btn.text.strip() or "sem texto"
            onclick = btn.get_attribute('onclick') or "sem onclick"
            print(f"   {i+1}. '{text}' - onclick: {onclick[:50]}")
            
    except:
        pass
    
    return False

def main():
    print("üöÄ INICIANDO AUTOMA√á√ÉO COMPLETA - GERADOR PRO")
    print(f"‚è∞ Hor√°rio: {time.strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Pega credenciais
    login = os.environ.get("LOGIN")
    senha = os.environ.get("SENHA")
    
    if not login or not senha:
        print("‚ùå Credenciais n√£o encontradas!")
        return
    
    print(f"üîë Login: {login}")
    
    driver = setup_driver()
    try:
        # Fluxo completo
        fazer_login(driver, login, senha)
        ir_gerar_futebol(driver)
        selecionar_opcoes_futebol(driver)
        gerar_banners(driver)
        
        sucesso_envio = aguardar_e_enviar_telegram(driver)
        
        if sucesso_envio:
            print("üéâ AUTOMA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("üîî Verifique seu canal no Telegram para os banners!")
        else:
            print("‚ö†Ô∏è Gera√ß√£o pode ter sido conclu√≠da, mas envio autom√°tico falhou")
            print("üí° Verifique manualmente se os banners est√£o dispon√≠veis no site")
        
        print(f"üìç URL final: {driver.current_url}")
        
    except Exception as e:
        print(f"‚ùå ERRO: {str(e)}")
        print(f"üìç URL atual: {driver.current_url}")
        
        # Debug da p√°gina atual em caso de erro
        try:
            body_text = driver.find_element(By.TAG_NAME, "body").text
            print(f"üìÑ Conte√∫do da p√°gina atual: {body_text[:500]}...")
        except:
            pass
        
        raise e
        
    finally:
        driver.quit()
        print("üîí Navegador fechado")

if __name__ == "__main__":
    main()
