import os, time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

def setup():
    print("üîß Configurando Chrome...")
    opts = Options()
    opts.add_argument("--headless")
    opts.add_argument("--no-sandbox") 
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--window-size=1920,1080")
    opts.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=opts)
    print("‚úÖ Chrome configurado!")
    return driver

def debug_page(driver, step):
    """Debug completo da p√°gina atual"""
    print(f"üîç DEBUG {step}:")
    print(f"   URL atual: {driver.current_url}")
    print(f"   T√≠tulo: {driver.title}")
    
    # Lista todos os inputs na p√°gina
    try:
        inputs = driver.find_elements(By.TAG_NAME, "input")
        print(f"   üìù {len(inputs)} campos input encontrados:")
        for i, inp in enumerate(inputs[:5]):  # Mostra s√≥ os 5 primeiros
            attrs = []
            for attr in ['name', 'type', 'id', 'placeholder', 'class']:
                value = inp.get_attribute(attr)
                if value:
                    attrs.append(f"{attr}='{value}'")
            print(f"      {i+1}. <input {' '.join(attrs)}>")
    except:
        print("   ‚ùå Erro ao listar inputs")
    
    # Lista todos os bot√µes
    try:
        buttons = driver.find_elements(By.TAG_NAME, "button")
        print(f"   üîò {len(buttons)} bot√µes encontrados:")
        for i, btn in enumerate(buttons[:5]):
            text = btn.text.strip() or btn.get_attribute('value') or 'sem texto'
            attrs = []
            for attr in ['type', 'id', 'class']:
                value = btn.get_attribute(attr)
                if value:
                    attrs.append(f"{attr}='{value}'")
            print(f"      {i+1}. '{text}' - {' '.join(attrs)}")
    except:
        print("   ‚ùå Erro ao listar bot√µes")
    
    # Lista links
    try:
        links = driver.find_elements(By.TAG_NAME, "a")
        print(f"   üîó {len(links)} links encontrados:")
        for i, link in enumerate(links[:5]):
            text = link.text.strip() or 'sem texto'
            href = link.get_attribute('href') or 'sem href'
            print(f"      {i+1}. '{text}' -> {href}")
    except:
        print("   ‚ùå Erro ao listar links")
    
    print("   " + "="*50)

def main():
    print("üöÄ INICIANDO AUTOMA√á√ÉO COM DEBUG COMPLETO")
    
    login = os.environ.get("LOGIN")
    senha = os.environ.get("SENHA")
    
    if not login or not senha:
        print("‚ùå ERRO: Credenciais n√£o encontradas!")
        print(f"   LOGIN: {'‚úÖ OK' if login else '‚ùå VAZIO'}")
        print(f"   SENHA: {'‚úÖ OK' if senha else '‚ùå VAZIO'}")
        return
    
    print(f"üîë Credenciais carregadas - LOGIN: {login[:3]}...")
    
    driver = setup()
    try:
        print("üåê Acessando site...")
        driver.get("https://geradorpro.com/login")
        time.sleep(5)
        
        debug_page(driver, "P√ÅGINA DE LOGIN")
        
        # Tenta encontrar campo de email de forma mais inteligente
        print("üìß Procurando campo de email...")
        campo_email = None
        
        # Estrat√©gia 1: Por atributos comuns
        for selector in ["input[name='email']", "input[type='email']", "input[id='email']"]:
            try:
                campo_email = driver.find_element(By.CSS_SELECTOR, selector)
                print(f"‚úÖ Email encontrado via CSS: {selector}")
                break
            except:
                continue
        
        # Estrat√©gia 2: Por placeholder
        if not campo_email:
            try:
                campo_email = driver.find_element(By.XPATH, "//input[contains(@placeholder, 'mail') or contains(@placeholder, 'Mail') or contains(@placeholder, 'EMAIL')]")
                print("‚úÖ Email encontrado via placeholder")
            except:
                pass
        
        # Estrat√©gia 3: Primeiro input da p√°gina
        if not campo_email:
            try:
                inputs = driver.find_elements(By.TAG_NAME, "input")
                if inputs:
                    campo_email = inputs[0]
                    print(f"‚úÖ Usando primeiro input da p√°gina: {campo_email.get_attribute('outerHTML')[:100]}...")
            except:
                pass
        
        if not campo_email:
            print("‚ùå ERRO CR√çTICO: Campo de email n√£o encontrado!")
            debug_page(driver, "ERRO EMAIL")
            return
        
        # Preenche email
        try:
            campo_email.clear()
            campo_email.send_keys(login)
            print(f"‚úÖ Email preenchido: {login}")
        except Exception as e:
            print(f"‚ùå Erro ao preencher email: {e}")
            return
        
        # Procura campo senha
        print("üîê Procurando campo de senha...")
        campo_senha = None
        
        for selector in ["input[name='password']", "input[type='password']", "input[id='password']"]:
            try:
                campo_senha = driver.find_element(By.CSS_SELECTOR, selector)
                print(f"‚úÖ Senha encontrada via CSS: {selector}")
                break
            except:
                continue
        
        if not campo_senha:
            print("‚ùå ERRO CR√çTICO: Campo de senha n√£o encontrado!")
            debug_page(driver, "ERRO SENHA")
            return
        
        # Preenche senha
        try:
            campo_senha.clear()
            campo_senha.send_keys(senha)
            print("‚úÖ Senha preenchida")
        except Exception as e:
            print(f"‚ùå Erro ao preencher senha: {e}")
            return
        
        # Procura bot√£o de login
        print("üîò Procurando bot√£o de login...")
        botao_login = None
        
        # Estrat√©gias m√∫ltiplas para bot√£o
        estrategias = [
            ("CSS", "button[type='submit']"),
            ("CSS", "input[type='submit']"),
            ("XPATH", "//button[contains(text(), 'Entrar')]"),
            ("XPATH", "//button[contains(text(), 'Login')]"),
            ("XPATH", "//input[@value='Entrar']"),
            ("XPATH", "//button"),  # Qualquer bot√£o
        ]
        
        for tipo, selector in estrategias:
            try:
                if tipo == "CSS":
                    botao_login = driver.find_element(By.CSS_SELECTOR, selector)
                else:
                    botao_login = driver.find_element(By.XPATH, selector)
                print(f"‚úÖ Bot√£o login encontrado via {tipo}: {selector}")
                break
            except:
                continue
        
        if not botao_login:
            print("‚ùå ERRO CR√çTICO: Bot√£o de login n√£o encontrado!")
            debug_page(driver, "ERRO BOT√ÉO LOGIN")
            return
        
        # Clica no bot√£o
        try:
            botao_login.click()
            print("‚úÖ Clicou no bot√£o de login!")
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o: {e}")
            # Tenta JavaScript como alternativa
            try:
                driver.execute_script("arguments[0].click();", botao_login)
                print("‚úÖ Clicou via JavaScript!")
            except:
                print("‚ùå Falhou mesmo com JavaScript")
                return
        
        # Aguarda redirecionamento
        print("‚è≥ Aguardando redirecionamento ap√≥s login...")
        time.sleep(8)
        
        debug_page(driver, "AP√ìS LOGIN")
        
        # Se chegou at√© aqui, o login funcionou
        print("üéâ LOGIN REALIZADO COM SUCESSO!")
        print(f"   URL atual: {driver.current_url}")
        
        # Resto do processo seria aqui...
        print("‚öΩ Pr√≥ximo passo seria procurar menu futebol...")
        print("‚úÖ TESTE DE LOGIN CONCLU√çDO - Interrompendo aqui para debug")
        
    except Exception as e:
        print(f"üí• ERRO GERAL: {str(e)}")
        print(f"   Tipo do erro: {type(e).__name__}")
        try:
            debug_page(driver, "ERRO FATAL")
        except:
            pass
        raise e
    finally:
        print("üîí Fechando navegador...")
        driver.quit()

if __name__ == "__main__":
    main()
